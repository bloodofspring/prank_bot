from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from client_handlers.base import *
from config import OP_USERS
from database.models import ChannelsToSub


class GetLink(BaseHandler):
    HANDLER = CallbackQueryHandler
    FILTER = create(lambda _, __, q: q and q.data and q.data in ["prank", "check_subs"])

    @property
    async def channels_for_sub_keyboard(self) -> InlineKeyboardMarkup | None:
        sub_instances = []

        for chan in ChannelsToSub.select():
            try:
                await self.client.get_chat_member(chat_id=chan.tg_id, user_id=self.request.from_user.id)
            except Exception as e:
                can_t_get_user_error = e
                sub_instances.append(chan)

        if not sub_instances:
            return None

        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª {sub_instances.index(c) + 1}", url=f"https://t.me/{c.tg_id.strip('@')}")
        ] for c in sub_instances])

    @staticmethod
    def add_check_button(keyboard: list[list[InlineKeyboardButton]]):
        keyboard += [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subs")]
        return keyboard

    async def func(self):
        keyboard = await self.channels_for_sub_keyboard

        if keyboard is not None and self.request.from_user.id not in OP_USERS:
            await self.request.message.reply(
                "–ò–∑–≤–∏–Ω–∏, –±–æ—Ç **–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π**! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º **–ø–æ–¥–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª!**",
                reply_markup=keyboard, disable_web_page_preview=True
            )
            return

        await self.request.message.reply((
            "–ü—Ä–∏–≤–µ—Ç,\n"
            "üîó –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n"
            "https: // yandex-food-f2a0f4.netlify.app\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –Ω–∞–ø—É–≥–∞—Ç—å –∏—Ö."
        ))


class HowDItWorks(BaseHandler):
    HANDLER = CallbackQueryHandler
    FILTER = create(lambda _, __, q: q and q.data and q.data == "how_d_it_works")

    async def func(self):
        await self.request.message.reply((
            "–í—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–∏—Å–ª–∞–ª –±–æ—Ç.\n"
            "–î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥¬ª, "
            "–Ω–æ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å —Å—Ç–æ–Ω—ã –Ω–∞ –≤—Å—é –∫–æ–º–Ω–∞—Ç—É."
        ))
